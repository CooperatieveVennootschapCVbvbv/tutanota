//@flow
const map: {[string]: () => mixed} = {    "BlobHash": () => Promise.resolve({"_TypeModel":{"name":"BlobHash","since":1,"type":"AGGREGATED_TYPE","id":41,"rootId":"B3N0b3JhZ2UAKQ","versioned":false,"encrypted":false,"values":{"_id":{"id":42,"type":"CustomId","cardinality":"One","final":true,"encrypted":false},"hash":{"id":43,"type":"Bytes","cardinality":"One","final":false,"encrypted":false}},"associations":{},"app":"storage","version":"1"}}),
    "BlobServiceGetData": () => Promise.resolve({"_TypeModel":{"name":"BlobServiceGetData","since":1,"type":"DATA_TRANSFER_TYPE","id":44,"rootId":"B3N0b3JhZ2UALA","versioned":false,"encrypted":false,"values":{"_format":{"id":45,"type":"Number","cardinality":"One","final":false,"encrypted":false},"archiveId":{"id":46,"type":"GeneratedId","cardinality":"One","final":false,"encrypted":false}},"associations":{"blobs":{"id":47,"type":"AGGREGATION","cardinality":"Any","final":false,"refType":"BlobHash"}},"app":"storage","version":"1"}}),
}
export default map